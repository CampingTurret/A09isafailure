import matplotlib.pyplot as plt
import numpy as np

# velocity values
v_s0_to = [35.24273039, 46.22479918, 37.01605053, 69.32403138, 90.92625327, 72.81223164]
v_s0_l = [33.33239135, 43.71917497, 35.00958833, 65.5663088, 85.99757806, 68.86543049]
v_s1 = [41.39389039, 54.29273639, 43.47672049, 81.42363899, 106.7962476, 85.52065921]
v_a = [66.86859179, 87.70566846, 70.23324087, 131.5335192, 172.5209836, 138.1519349]
v_c = 200.6476
v_d = v_c*1.25
v_f_to = [66.23022462, 86.86837822, 69.56275278, 130.2778224, 170.8739962, 136.8330547]
v_f_a = [74.5090027, 97.7269255, 78.25809687, 146.5625502, 192.2332457, 153.9371866]
v_f_l = [63.4369147, 83.20463853, 66.62889096, 124.7832565, 163.6672559, 131.0620169]

#plot labels
labels= ["Sea-Level, OEW", "Sea-Level, MTOW", "Sea-Level, ZFW", "Cruise, OEW", "Cruise, MTOW", "Cruise, ZFW"]

# n values
n_max = 2.609587504
n_min = -1
n_flaps_max = 2
#iteration
i=0
# making data points
for i in range(len(v_a)):
    x = np.linspace(0, v_d, 100000)

    # upper
    y1 = np.piecewise(x, [x < 0, np.logical_and((x>=0), (x<v_a[i])), np.logical_and((x>=v_a[i]), (x<v_d)), (x==v_d)], [0, lambda x: (x/v_s1[i])**2, lambda x: n_max, lambda x: 0])
    
    # lower
    y2 = np.piecewise(x, [x < 0, np.logical_and((x>=0), (x<v_s1[i])), np.logical_and((x>=v_s1[i]), (x<v_c)), np.logical_and((x>=v_c), (x<v_d))], [lambda x: 0, lambda x: -(x/v_s1[i])**2, lambda x: n_min, lambda x: -n_min/(v_d-v_c)*(x-v_d)])

    # flaps down landing configuration
    x_l = np.linspace(0, np.sqrt(np.dot(2, v_s1[i]**2)), 100000)
    
    y_l = np.piecewise(x_l, [x_l < 0, np.logical_and((x_l>=0),(x_l<np.sqrt(np.dot(2, v_s0_l[i]**2)))), np.logical_and((x_l>=np.sqrt(np.dot(2, v_s0_l[i]**2))),(x_l<=np.sqrt(np.dot(2, v_s1[i]**2)))) ], [lambda x_l: 0, lambda x_l: (x_l/v_s0_l[i])**2, 2])
    
    # flaps down takeoff configuration
    x_to = np.linspace(0, np.sqrt(np.dot(2, v_s1[i]**2)), 100000)
    
    y_to = np.piecewise(x_to, [x_to < 0, np.logical_and((x_to>=0),(x_to<np.sqrt(np.dot(2, v_s0_to[i]**2)))), np.logical_and((x_to>=np.sqrt(np.dot(2, v_s0_to[i]**2))),(x_to<=np.sqrt(np.dot(2, v_s1[i]**2)))) ], [lambda x_to: 0, lambda x_to: (x_to/v_s0_to[i])**2, 2])

    # plot
    plt.subplot(3, 2, int(i+1))
    plt.plot(x_to, y_to, 'g-',)
    plt.plot(x_l, y_l, 'b-')
    plt.plot(x, y1, color="black",)
    plt.plot(x, y2, color="black")
    
    # naming the x axis
    plt.xlabel('Velocity')
                      
    # naming the y axis
    plt.ylabel('n')
  
    # title 
    plt.title(labels[i])
plt.figlegend(['flaps down (takeoff)', 'flaps down (landing)'])
plt.legend(loc='best')
#subplot spacing    
plt.subplots_adjust(wspace=0.4,
                    hspace=0.5)

#super title
plt.suptitle('V-n Diagrams')

plt.show()
    



